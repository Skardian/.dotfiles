priority -45

# Preprocessor
snippet inc "#include <> header (inc)"
#include <${1:}.h>
endsnippet

snippet incl "#include local header (incl)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet def "#define ..."
#define ${1}
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet ifdef
#ifdef ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

# Main
snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

# Loops
snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while(${1:/* condition */});
endsnippet

# Prints
snippet pr "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fpr "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# Flow control
snippet if "if .. (if)"
if (${1:true}) {
	${VISUAL}${0}
}
endsnippet

snippet ifi "if { .. } (ifi)"
if (${1:true}) ${0:${VISUAL}};
endsnippet

snippet ife "if .. else .. (ife)"
if (${1:true}) {
	${VISUAL}${2}
} else {
	${0}
}
endsnippet

snippet el "else .. (el)"
else {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet t "Ternary operator"
(${1:${VISUAL:true}}) ? ${2:a} : ${3:b}
endsnippet

snippet switch "switch ... case ... default"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet switchndef "switch ... case"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

snippet case "case case"
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

# Function declarations
snippet "^f(un)?" "Function" r
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet "^f(un)?d" "Function declaration" r
${1:void} ${2:function_name}(${3});
endsnippet

# Types
snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

# Typedef
snippet td "typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet tds "typedef struct"
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`!p snip.rv = (snip.basename or "name") + "_t"`};
endsnippet

snippet tde "typedef enum"
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

# Misc
snippet "\." "Replace . with [${1}]" r
[${1}]
endsnippet

snippet todo "TODO comment"
# TODO: $0
endsnippet

# vim:ft=snippets:
