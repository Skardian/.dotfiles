priority 0

# Hashbangs
snippet "^#!" "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby
${0}
endsnippet
snippet "^# ?[uU]?[tT]?[fF]?-?8" "# encoding: UTF-8" r
# encoding: UTF-8
${0}
endsnippet

# Requires
snippet "^r(eq)?" "require" r
require '${1}'
endsnippet
snippet "^r(eq)?r" "require_relative" r
require_relative '${1}'
endsnippet

# Definitions
snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2:(${3:*args})}
	${0}
end
endsnippet
snippet defi "def initialize ..."
def initialize${1:(${2:*args})}
	${0}
end
endsnippet

# Accessors
snippet r
	attr_reader :${0:attr_names}
endsnippet
snippet w
	attr_writer :${0:attr_names}
endsnippet
snippet rw
	attr_accessor :${0:attr_names}
endsnippet

# Blocks
snippet do "do |<key>| ... end" i
do |${1:args}|
	${VISUAL}{0}
end
endsnippet
snippet Do "do ... end" i
do
	${VISUAL}${0}
end
endsnippet

snippet "for" "(<from>..<to>).each { |<i>| <block> }" r
(${1:from}..${2:to}).each do |${3:i}|
${VISUAL}${0}
}
endsnippet
snippet "fori" "(<from>..<to>).each { |<i>| <block> }" r
(${1:from}..${2:to}).each { |${3:i}| ${VISUAL}${0} }
endsnippet

snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
${VISUAL}${0}
end
endsnippet
snippet when "when <expression> ..."
when ${1:expression}
${VISUAL}${0}
endsnippet

snippet "(\S+)\.selecti" ".select { |<item>| <block>}" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${2:block} }
endsnippet
snippet "(\S+)\.select" ".select do |<item>| <block> end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
	${0:block}
end
endsnippet

snippet "(\S+)\.ea(ch)?i" "<elements>.each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each { |${1:e}| ${0} }
endsnippet
snippet "(\S+)\.ea(ch)" "<elements>.each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:e}|
	${0}
end
endsnippet

snippet "(\S+)\.each_?w(ith)?_?i(ndex)?i" ".each_with_index { |<element>,<i>| <block> }" r
`!p snip.rv=match.group(1)`.each_with_index { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}| $0 }
endsnippet
snippet "(\S+)\.each_?w(ith)?_?i(ndex)?" ".each_with_index do |<element>,<i>| <block> end" r
`!p snip.rv=match.group(1)`.each_with_index do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}|
	$0
end
endsnippet

snippet "(\S+)\.each_?k(ey)?i" ".each_key { |<key>| <block> }" r
`!p snip.rv=match.group(1)`.each_key { |${1:key}| ${0} }
endsnippet
snippet "(\S+)\.each_?k(ey)?" ".each_key do |key| <block> end" r
`!p snip.rv=match.group(1)`.each_key do |${1:key}|
	${0}
end
endsnippet

snippet "(\S+)\.each_?val(ue)?i" ".each_value { |<value>| <block> }" r
`!p snip.rv=match.group(1)`.each_value { |${1:value}| ${0} }
endsnippet
snippet "(\S+)\.each_?val(ue)?" ".each_value do |<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_value do |${1:value}|
	${0}
end
endsnippet

snippet "(\S+)\.sorti" ".sort { |<a>,<b>| <block> }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| ${0} }
endsnippet
snippet "(\S+)\.sort" ".sort do |<a>,<b>| <block> end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	${0}
end
endsnippet

snippet "(\S+)\.mapi" ".map { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${0} }
endsnippet
snippet "(\S+)\.map" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0}
end
endsnippet

snippet "(\S+)\.rev(erse)?_?eachi" ".reverse_each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.reverse_each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| $0 }
endsnippet
snippet "(\S+)\.rev(erse)?_?each" ".reverse_each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.reverse_each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	$0
end
endsnippet

# Flow control
snippet if
if ${1:condition}
	${VISUAL}${0}
end
endsnippet

snippet ife
if ${1:condition}
	${VISUAL}${2}
else
	${0}
end
endsnippet

snippet eif
elsif ${1:condition}
	${VISUAL}${0}
endsnippet

snippet ifee
if ${1:condition}
	${VISUAL}${2}
elsif ${3:condition}
	${4}
else
	${0}
end
endsnippet

snippet unless
unless ${1:condition}
	${VISUAL}${0}
end
endsnippet

snippet unlesse
unless ${1:condition}
	${VISUAL}${2}
else
	${0}
end
endsnippet

snippet unlessee
unless ${1:condition}
	${VISUAL}${2}
elsif ${3:condition}
	${4}
else
	${0}
end
endsnippet

# Initializers
snippet array
	Array.new(${1:10}) { |${2:i}| ${0} }
endsnippet

snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${0} }
endsnippet

snippet ivc "Instance variable cached"
	@${1:variable_name} ||= ${0:${VISUAL:cached_value}}
endsnippet


# Misc
snippet #
# =>
endsnippet

